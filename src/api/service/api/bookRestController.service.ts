/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BookDto } from '../model/bookDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class BookRestControllerService {

    protected basePath = 'http://localhost:8083';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createBook
     * 
     * @param author author
     * @param genre genre
     * @param name name
     * @param price price
     * @param publicationDate publicationDate
     * @param publishingOffice publishingOffice
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBookUsingPOST(author?: string, genre?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createBookUsingPOST(author?: string, genre?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createBookUsingPOST(author?: string, genre?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createBookUsingPOST(author?: string, genre?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (author !== undefined && author !== null) {
            queryParameters = queryParameters.set('author', <any>author);
        }
        if (genre !== undefined && genre !== null) {
            queryParameters = queryParameters.set('genre', <any>genre);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (price !== undefined && price !== null) {
            queryParameters = queryParameters.set('price', <any>price);
        }
        if (publicationDate !== undefined && publicationDate !== null) {
            queryParameters = queryParameters.set('publicationDate', <any>publicationDate);
        }
        if (publishingOffice !== undefined && publishingOffice !== null) {
            queryParameters = queryParameters.set('publishingOffice', <any>publishingOffice);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/api/book`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBookById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBookByIdUsingDELETE(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBookByIdUsingDELETE(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBookByIdUsingDELETE(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBookByIdUsingDELETE(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/book/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBook
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBookUsingGET(id?: string, observe?: 'body', reportProgress?: boolean): Observable<BookDto>;
    public getBookUsingGET(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BookDto>>;
    public getBookUsingGET(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BookDto>>;
    public getBookUsingGET(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BookDto>(`${this.configuration.basePath}/api/book/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBooks
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBooksUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<BookDto>>;
    public getBooksUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BookDto>>>;
    public getBooksUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BookDto>>>;
    public getBooksUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<BookDto>>(`${this.configuration.basePath}/api/book`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateBook
     * 
     * @param author author
     * @param genre genre
     * @param id id
     * @param name name
     * @param price price
     * @param publicationDate publicationDate
     * @param publishingOffice publishingOffice
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBookUsingPUT(author?: string, genre?: string, id?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateBookUsingPUT(author?: string, genre?: string, id?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateBookUsingPUT(author?: string, genre?: string, id?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateBookUsingPUT(author?: string, genre?: string, id?: string, name?: string, price?: number, publicationDate?: number, publishingOffice?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (author !== undefined && author !== null) {
            queryParameters = queryParameters.set('author', <any>author);
        }
        if (genre !== undefined && genre !== null) {
            queryParameters = queryParameters.set('genre', <any>genre);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (price !== undefined && price !== null) {
            queryParameters = queryParameters.set('price', <any>price);
        }
        if (publicationDate !== undefined && publicationDate !== null) {
            queryParameters = queryParameters.set('publicationDate', <any>publicationDate);
        }
        if (publishingOffice !== undefined && publishingOffice !== null) {
            queryParameters = queryParameters.set('publishingOffice', <any>publishingOffice);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.configuration.basePath}/api/book/${encodeURIComponent(String(id))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
